Description: Fix for CVE-2014-3525 
Author: Bryan Call <bcall@apache.org>
Origin: upstream, https://github.com/apache/trafficserver/commit/f64b31af65ca1b8c12681dd8eff102c397130751
Reviewed-by: Jean Baptiste Favre <debian@jbfavre.org>
Last-Update: 2016-07-23
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/mgmt/RecordsConfig.cc
+++ b/mgmt/RecordsConfig.cc
@@ -253,7 +253,7 @@ RecordElement RecordsConfig[] = {
   ,
   {RECT_CONFIG, "proxy.config.admin.autoconf.doc_root", RECD_STRING, TS_BUILD_SYSCONFDIR, RECU_NULL, RR_REQUIRED, RECC_NULL, NULL, RECA_NULL}
   ,
-  {RECT_CONFIG, "proxy.config.admin.autoconf.localhost_only", RECD_INT, "0", RECU_RESTART_TM, RR_NULL, RECC_INT, "[0-1]", RECA_NULL}
+  {RECT_CONFIG, "proxy.config.admin.autoconf.localhost_only", RECD_INT, "1", RECU_RESTART_TM, RR_NULL, RECC_INT, "[0-1]", RECA_NULL}
   ,
   {RECT_CONFIG, "proxy.config.admin.autoconf.pac_filename", RECD_STRING, "proxy.pac", RECU_DYNAMIC, RR_NULL, RECC_NULL, NULL, RECA_NULL}
   ,
--- a/mgmt/web2/WebIntrMain.cc
+++ b/mgmt/web2/WebIntrMain.cc
@@ -67,6 +67,7 @@ extern "C"
 #define STACK_H
 
 typedef int fd;
+static RecInt autoconf_localhost_only = 1;
 
 #define SOCKET_TIMEOUT 10*60
 
@@ -75,14 +76,14 @@ WebInterFaceGlobals wGlobals;
 
 // There are two web ports maintained
 //
-//  One is for adminstration.  This port serves
+//  One is for administration.  This port serves
 //     all the configuration and monitoring info.
 //     Most sites will have some security features
 //     (authentication and SSL) active on this
 //     port since it system administrator access
 //  The other is for things that we want to serve
 //     insecurely.  Client auto configuration falls
-//     in this catagory.  The public key for the
+//     in this category.  The public key for the
 //     administration server is another example
 //
 WebContext autoconfContext;
@@ -96,7 +97,7 @@ int aconf_port_arg = -1;
 //      directory exists and that the default file
 //      exists
 //
-//    returns 0 if everthing is OK
+//    returns 0 if everything is OK
 //    returns 1 if something is missing
 //
 int
@@ -235,7 +236,11 @@ newTcpSocket(int port)
   memset(&socketInfo, 0, sizeof(socketInfo));
   socketInfo.sin_family = AF_INET;
   socketInfo.sin_port = htons(port);
-  socketInfo.sin_addr.s_addr = htonl(INADDR_ANY);
+  if (autoconf_localhost_only == 1) {
+    socketInfo.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
+  } else {
+    socketInfo.sin_addr.s_addr = htonl(INADDR_ANY);
+  }
 
   // Allow for immediate re-binding to port
   if (setsockopt(socketFD, SOL_SOCKET, SO_REUSEADDR, (char *) &one, sizeof(int)) < 0) {
@@ -346,7 +351,6 @@ webIntr_main(void *x)
 
   RecInt tempInt;
   bool found;
-  int autoconf_localhost_only = 0;
 
   int addrLen;
   int i;
@@ -390,8 +394,7 @@ webIntr_main(void *x)
   ink_mutex_init(&wGlobals.submitLock, "Submission Mutex");
 
   // Fix for INKqa10514
-  found = (RecGetRecordInt("proxy.config.admin.autoconf.localhost_only", &tempInt) == REC_ERR_OKAY);
-  autoconf_localhost_only = (int) tempInt;
+  found = (RecGetRecordInt("proxy.config.admin.autoconf.localhost_only", &autoconf_localhost_only) == REC_ERR_OKAY);
   ink_assert(found);
 
   // Set up the client autoconfiguration context
@@ -405,7 +408,7 @@ webIntr_main(void *x)
     publicPort = (int) tempInt;
     ink_assert(found);
   }
-  Debug("ui", "[WebIntrMain] Starting Client AutoConfig Server on Port %d\n", publicPort);
+  Debug("ui", "[WebIntrMain] Starting Client AutoConfig Server on Port %d", publicPort);
 
   found = (RecGetRecordString_Xmalloc("proxy.config.admin.autoconf.doc_root", &(autoconfContext.docRoot)) == REC_ERR_OKAY);
   ink_assert(found);
--- a/proxy/http/HttpConfig.cc
+++ b/proxy/http/HttpConfig.cc
@@ -1388,6 +1388,10 @@ HttpConfig::startup()
     }
   }
 
+  // Local Manager
+  HttpEstablishStaticConfigLongLong(c.autoconf_port, "proxy.config.admin.autoconf_port");
+  HttpEstablishStaticConfigByte(c.autoconf_localhost_only, "proxy.config.admin.autoconf.localhost_only");
+
   // Cluster time delta gets it own callback since it needs
   //  to use ink_atomic_swap
   c.cluster_time_delta = 0;
@@ -1611,6 +1615,10 @@ HttpConfig::reconfigure()
   params->number_of_redirections = m_master.number_of_redirections;
   params->post_copy_size = m_master.post_copy_size;
 
+  // Local Manager
+  params->autoconf_port = m_master.autoconf_port;
+  params->autoconf_localhost_only = m_master.autoconf_localhost_only;
+
   m_id = configProcessor.set(m_id, params);
 
 #undef INT_TO_BOOL
--- a/proxy/http/HttpConfig.h
+++ b/proxy/http/HttpConfig.h
@@ -809,6 +809,13 @@ public:
 
   OverridableHttpConfigParams oride;
 
+  ////////////////////
+  // Local Manager  //
+  ////////////////////
+  MgmtInt autoconf_port;
+  MgmtByte autoconf_localhost_only;
+
+
 private:
   /////////////////////////////////////
   // operator = and copy constructor //
@@ -980,7 +987,9 @@ HttpConfigParams::HttpConfigParams()
     ignore_accept_language_mismatch(0),
     ignore_accept_encoding_mismatch(0),
     ignore_accept_charset_mismatch(0),
-    normalize_ae_gzip(1)
+    normalize_ae_gzip(1),
+    autoconf_port(0),
+    autoconf_localhost_only(0)
 { }
 
 inline
--- a/proxy/http/HttpTransact.cc
+++ b/proxy/http/HttpTransact.cc
@@ -780,11 +780,16 @@ HttpTransact::StartRemapRequest(State* s
   int host_len, path_len;
   const char *host = url->host_get(&host_len);
   const char *path = url->path_get(&path_len);
+  const int port = url->port_get();
 
   const char syntxt[] = "synthetic.txt";
 
   s->cop_test_page = (ptr_len_cmp(host, host_len, local_host_ip_str, sizeof(local_host_ip_str) - 1) == 0) &&
-    (ptr_len_cmp(path, path_len, syntxt, sizeof(syntxt) - 1) == 0);
+    (ptr_len_cmp(path, path_len, syntxt, sizeof(syntxt) - 1) == 0) &&
+    port == s->http_config_param->autoconf_port &&
+    s->method == HTTP_WKSIDX_GET &&
+    s->orig_scheme == URL_WKSIDX_HTTP &&
+    (!s->http_config_param->autoconf_localhost_only || ats_ip4_addr_cast(&s->client_info.addr.sa) == htonl(INADDR_LOOPBACK));
 
   //////////////////////////////////////////////////////////////////
   // FIX: this logic seems awfully convoluted and hard to follow; //
