Origin: upstream https://github.com/apache/trafficserver/pull/5695
Description: Add MIMEHdr Garbage Collection to HPACK Dynamic Table
--- a/proxy/hdrs/HdrHeap.cc
+++ b/proxy/hdrs/HdrHeap.cc
@@ -1117,6 +1117,24 @@ HdrHeap::dump_heap(int len)
   fprintf(stderr, "\n-------------- End header heap dump -----------\n");
 }
 
+uint64_t
+HdrHeap::total_used_size() const
+{
+  uint64_t size    = 0;
+  const HdrHeap *h = this;
+
+  while (h) {
+    size += (h->m_free_start - h->m_data_start);
+    h = h->m_next;
+  }
+
+  return size;
+}
+
+//
+// HdrStrHeap
+//
+
 void
 HdrStrHeap::free()
 {
--- a/proxy/hdrs/HdrHeap.h
+++ b/proxy/hdrs/HdrHeap.h
@@ -266,6 +266,8 @@ public:
   size_t required_space_for_evacuation();
   bool attach_str_heap(char *h_start, int h_len, RefCountObj *h_ref_obj, int *index);
 
+  uint64_t total_used_size() const;
+
   /** Struct to prevent garbage collection on heaps.
       This bumps the reference count to the heap containing the pointer
       while the instance of this class exists. When it goes out of scope
--- a/proxy/http2/HPACK.cc
+++ b/proxy/http2/HPACK.cc
@@ -166,6 +166,21 @@ static const StaticTable STATIC_TABLE[] 
                                            {"via", ""},
                                            {"www-authenticate", ""}};
 
+/**
+  Threshold for total HdrHeap size which used by HPAK Dynamic Table.
+  The HdrHeap is filled by MIMEHdrImpl and MIMEFieldBlockImpl like below.
+  This threshold allow to allocate 3 HdrHeap at maximum.
+
+                     +------------------+-----------------------------+
+   HdrHeap 1 (2048): | MIMEHdrImpl(592) | MIMEFieldBlockImpl(528) x 2 |
+                     +------------------+-----------------------------+--...--+
+   HdrHeap 2 (4096): | MIMEFieldBlockImpl(528) x 7                            |
+                     +------------------------------------------------+--...--+--...--+
+   HdrHeap 3 (8192): | MIMEFieldBlockImpl(528) x 15                                   |
+                     +------------------------------------------------+--...--+--...--+
+*/
+static constexpr uint32_t HPACK_HDR_HEAP_THRESHOLD = sizeof(MIMEHdrImpl) + sizeof(MIMEFieldBlockImpl) * (2 + 7 + 15);
+
 /******************
  * Local functions
  ******************/
@@ -318,6 +333,24 @@ HpackIndexingTable::update_maximum_size(
   return _dynamic_table->update_maximum_size(new_size);
 }
 
+//
+// HpackDynamicTable
+//
+HpackDynamicTable::~HpackDynamicTable()
+{
+  this->_headers.clear();
+
+  this->_mhdr->fields_clear();
+  this->_mhdr->destroy();
+  delete this->_mhdr;
+
+  if (this->_mhdr_old != nullptr) {
+    this->_mhdr_old->fields_clear();
+    this->_mhdr_old->destroy();
+    delete this->_mhdr_old;
+  }
+}
+
 const MIMEField *
 HpackDynamicTable::get_header_field(uint32_t index) const
 {
@@ -413,9 +446,32 @@ HpackDynamicTable::_evict_overflowed_ent
     return false;
   }
 
+  this->_mime_hdr_gc();
+
   return true;
 }
 
+/**
+   When HdrHeap size of current MIMEHdr exceeds the threshold, allocate new MIMEHdr and HdrHeap.
+   The old MIMEHdr and HdrHeap will be freed, when all MIMEFiled are deleted by HPACK Entry Eviction.
+ */
+void
+HpackDynamicTable::_mime_hdr_gc()
+{
+  if (this->_mhdr_old == nullptr) {
+    if (this->_mhdr->m_heap->total_used_size() >= HPACK_HDR_HEAP_THRESHOLD) {
+      this->_mhdr_old = this->_mhdr;
+      this->_mhdr     = new MIMEHdr();
+      this->_mhdr->create();
+    }
+  } else {
+    if (this->_mhdr_old->fields_count() == 0) {
+      this->_mhdr_old->destroy();
+      this->_mhdr_old = nullptr;
+    }
+  }
+}
+
 //
 // [RFC 7541] 5.1. Integer representation
 //
--- a/proxy/http2/HPACK.h
+++ b/proxy/http2/HPACK.h
@@ -111,13 +111,7 @@ public:
     _mhdr->create();
   }
 
-  ~HpackDynamicTable()
-  {
-    _headers.clear();
-    _mhdr->fields_clear();
-    _mhdr->destroy();
-    delete _mhdr;
-  }
+  ~HpackDynamicTable();
 
   const MIMEField *get_header_field(uint32_t index) const;
   void add_header_field(const MIMEField *field);
@@ -130,11 +124,13 @@ public:
 
 private:
   bool _evict_overflowed_entries();
+  void _mime_hdr_gc();
 
-  uint32_t _current_size;
-  uint32_t _maximum_size;
+  uint32_t _current_size = 0;
+  uint32_t _maximum_size = 0;
 
-  MIMEHdr *_mhdr;
+  MIMEHdr *_mhdr     = nullptr;
+  MIMEHdr *_mhdr_old = nullptr;
   std::vector<MIMEField *> _headers;
 };
 
